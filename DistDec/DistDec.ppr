{
    Copyright (C) 2025 VCC
    creation date: 15 Jun 2025
    initial release date: 15 Jun 2025

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


library DistDec;

{$mode objfpc}{$H+}

uses
  //Windows,
  Interfaces, Classes, SysUtils,// Graphics, HashingExampleDM, ImgList,
  ClickerActionPlugins, ClickerUtils, DllUtils, ClickerPluginInMemFileSystem,
  DCPrijndael, dcpsha256, DistEncDecCommon
  ;

//var
//  AddToLogCallback: TOnActionPlugin_AddToLog;
//
//
//procedure AddToLog(AMsg: string);  //thread safe
//begin
//  if @AddToLogCallback <> nil then
//    AddToLogCallback(DefaultPluginReference, @AMsg[1]);
//end;


function GetAPIVersion: DWord; cdecl;
begin
  Result := CActionPlugin_APIVersion;
end;


procedure GetListOfProperties(APluginReference: Pointer;                 //UIClicker passes the plugin reference to the plugin, then the plugin calls some callbacks with that reference
                              AListOfProperties: Pointer;
                              AListOfPropertiesLen: PDWord;
                              AOnActionPlugin_UpdatePropertyIcons: TOnActionPlugin_UpdatePropertyIcons); cdecl;
//var
//  Properties: string;
//  i: Integer;
//  TempMemStream: TMemoryStream;
//  Bmp: TBitmap;
begin
  //Properties := FillInPropertyDetails;
  //AListOfPropertiesLen^ := SetPointedContentFromString(Properties, AListOfProperties);
  //
  //dmProperties := TdmProperties.Create(nil);
  //try
  //  for i := 0 to CPropertiesCount - 1 do
  //  begin
  //    TempMemStream := TMemoryStream.Create;
  //    Bmp := TBitmap.Create;
  //    try
  //      Bmp.PixelFormat := pf24bit;
  //      Bmp.Width := dmProperties.imglstProperties.Width;
  //      Bmp.Height := dmProperties.imglstProperties.Height;
  //      Bmp.Canvas.Pen.Color := clWhite;
  //      Bmp.Canvas.Brush.Color := clWhite;
  //      Bmp.Canvas.Rectangle(0, 0, Bmp.Width, Bmp.Height);
  //
  //      dmProperties.imglstProperties.Draw(Bmp.Canvas, 0, 0, i, dsNormal, itImage);
  //      Bmp.SaveToStream(TempMemStream);
  //
  //      AOnActionPlugin_UpdatePropertyIcons(APluginReference, TempMemStream.Memory, TempMemStream.Size);
  //    finally
  //      TempMemStream.Free;
  //      Bmp.Free;
  //    end;
  //  end;
  //finally
  //  dmProperties.Free;
  //end;
end;


procedure XorBlock(ABlock, AKey: Pointer; ALen: Integer);
type
  TEmptyArray = array[0..0] of Byte;
var
  i: Integer;
  PBlock, PKey: ^TEmptyArray;
begin
  PBlock := ABlock;
  PKey := AKey;

  for i := 0 to ALen - 1 do
    PBlock^[i] := PBlock^[i] xor PKey^[i];
end;


function ExecutePlugin(APluginReference: Pointer;
                       AListOfPluginSettings: Pointer;
                       AListOfPluginSettingsLen: PDWord;

                       AOnActionPlugin_GetActionCount: TOnActionPlugin_GetActionCount;
                       AOnActionPlugin_GetActionInfoByIndex: TOnActionPlugin_GetActionInfoByIndex;
                       AOnActionPlugin_GetActionContentByIndex: TOnActionPlugin_GetActionContentByIndex;
                       AOnActionPlugin_ExecuteAction: TOnActionPlugin_ExecuteAction;
                       AOnActionPlugin_GetAllTemplateVars: TOnActionPlugin_GetAllTemplateVars;
                       AOnActionPlugin_SetTemplateVar: TOnActionPlugin_SetTemplateVar;
                       AOnActionPlugin_DebugPoint: TOnActionPlugin_DebugPoint;
                       AOnActionPlugin_AddToLog: TOnActionPlugin_AddToLog;
                       AOnActionPlugin_SetResultImg: TOnActionPlugin_SetResultImg;
                       AOnActionPlugin_LoadBitmap: TOnActionPlugin_LoadBitmap;
                       AOnActionPlugin_GetAllowedFilesInfo: TOnActionPlugin_GetAllowedFilesInfo;
                       AOnActionPlugin_SetBitmap: TOnActionPlugin_SetBitmap;
                       AOnActionPlugin_Screenshot: TOnActionPlugin_Screenshot;
                       AOnActionPlugin_CheckStopAllActionsOnDemand: TOnActionPlugin_CheckStopAllActionsOnDemand;
                       AOnActionPlugin_InMemFS: TOnActionPlugin_InMemFS;
                       AOnActionPlugin_AppProcMsg: TOnActionPlugin_AppProcMsg
                       ): Boolean; cdecl;
begin
  Result := True;
end;


var
  FKey: string;
  FIV: string;
  FKeySet: Boolean = False;


function ProcessMemoryContent(AInData: Pointer; AInDataLen: Int64; AOnFileContent: TOnFileContentObj): Integer; cdecl;
var
  AES: TDCP_rijndael;
  i: Integer;
  Key: array[0..31] of Byte;
  DecryptedStream: TMemoryStream;
  InDataXorPrevBlock, HashOfBlock: array[0..31] of Byte;
  SHA256: TDCP_sha256;
begin
  Result := AInDataLen;  //not used for now

  try
    AES := TDCP_rijndael.Create(nil);
    try
      FillChar(Key, Length(Key), 0);
      if FKeySet then
      begin
        Move(FKey[1], Key, Length(Key));
        FillChar(FKey[1], Length(FKey), 0);

        SHA256 := TDCP_sha256.Create(nil);
        try
          SHA256.Init;
          SHA256.Update(FIV[1], Length(FIV));
          SHA256.Final(HashOfBlock);
        finally
          SHA256.Free;
        end;

        Move(AInData^, InDataXorPrevBlock, 32);
        XorBlock(@InDataXorPrevBlock, @HashOfBlock, 32);
      end;

      AES.Init(Key, Length(Key) shl 3, nil);  //do not use the IV here

      try
        DecryptedStream := TMemoryStream.Create;
        try
          DecryptedStream.SetSize(AInDataLen);
          for i := 0 to DecryptedStream.Size shr 5 - 1 do    //32-byte blocks
          begin
            AES.DecryptECB(InDataXorPrevBlock[0], Pointer(UInt64(DecryptedStream.Memory) + i shl 5)^);
            AES.DecryptECB(InDataXorPrevBlock[16], Pointer(UInt64(DecryptedStream.Memory) + i shl 5 + 16)^);
            Move(Pointer(UInt64(AInData) + i shl 5 + 32)^, InDataXorPrevBlock, 32);  // "+ 32" means next block.   The last block will get out of AInData buffer, by 32 bytes.

            SHA256 := TDCP_sha256.Create(nil);
            try
              SHA256.Init;
              SHA256.Update(Pointer(UInt64(DecryptedStream.Memory) + i shl 5)^, 32);
              SHA256.Final(HashOfBlock);
            finally
              SHA256.Free;
            end;

            XorBlock(@InDataXorPrevBlock, @HashOfBlock, 32);
          end;

          FillChar(InDataXorPrevBlock, Length(InDataXorPrevBlock), 0);
          FillChar(HashOfBlock, Length(HashOfBlock), 0);

          //Discard padding here, if any.

          for i := 0 to DecryptedStream.Size shr 5 - 1 do
            XorBlock(Pointer(UInt64(DecryptedStream.Memory) + i shl 5), @CDistSharedKey[0], 32);

          AOnFileContent(DecryptedStream.Memory, DecryptedStream.Size);
        finally
          DecryptedStream.Free;
        end;
      finally
        AES.Burn;
      end;
    finally
      AES.Free;
    end;
  except
    on E: Exception do
      //MessageBox(0, PChar('Plugin exception in ProcessMemoryContent: ' + E.Message), 'Dll', 0); //Access violation - very useful
  end;
end;


function ConfigurePluginForMemoryContent(AOnActionPlugin_InMemFS: TOnActionPlugin_InMemFS_Obj;
                                         AOnActionPlugin_SetTemplateVar: TOnActionPlugin_SetTemplateVar_Obj;
                                         AOnActionPlugin_AddToLog: TOnActionPlugin_AddToLog_Obj
                                         ): Boolean; cdecl;
const
  CKeyFileName: string = 'Mem:\Key.txt';
  CIVFileName: string = 'Mem:\IV.txt';
var
  PluginInMemFS: TPluginInMemFileSystem;
  //i: Integer;
  //s: string;
  //TempFileSize: Integer;
begin
  Result := True;
  FKeySet := False;  //init also here
  FIV := '012345678901234567890123456789AB';
  FKey := '012345678901234567890123456789AB';

  try
    PluginInMemFS := TPluginInMemFileSystem.Create;
    try
      //try
      //  TempFileSize := PluginInMemFS.GetFileSize(AOnActionPlugin_InMemFS, CKeyFileName);
      //except
      //  on E: Exception do
      //  begin
      //    AOnActionPlugin_AddToLog(PChar('Ex on GetFileSize_1: ' + E.Message));
      //    TempFileSize := -1; //in case the file is not found
      //  end;
      //end;

      //if TempFileSize > -1 then //if PluginInMemFS.FileExistsInMem(AOnActionPlugin_InMemFS, CKeyFileName) then  //there seems to be a bug when calling FileExistsInMem, because it throws AV
      if PluginInMemFS.FileExistsInMem(AOnActionPlugin_InMemFS, CKeyFileName) then  //there seems to be a bug when calling FileExistsInMem, because it throws AV  - probably, it was from a memory overwrite in ProcessMemoryContent above
      begin
        FKeySet := True;
        //read key from file
        SetLength(FKey, PluginInMemFS.GetFileSize(AOnActionPlugin_InMemFS, CKeyFileName));
        PluginInMemFS.LoadFileFromMem(AOnActionPlugin_InMemFS, CKeyFileName, @FKey[1]);

        //try
        //  TempFileSize := PluginInMemFS.GetFileSize(AOnActionPlugin_InMemFS, CIVFileName);
        //except
        //  on E: Exception do
        //  begin
        //    AOnActionPlugin_AddToLog(PChar('Ex on GetFileSize_2: ' + E.Message));
        //    TempFileSize := -1; //in case the file is not found
        //  end;
        //end;

        //if TempFileSize > -1 then //if PluginInMemFS.FileExistsInMem(AOnActionPlugin_InMemFS, CIVFileName) then     //see above
        if PluginInMemFS.FileExistsInMem(AOnActionPlugin_InMemFS, CIVFileName) then
        begin
          //read IV from file
          SetLength(FIV, PluginInMemFS.GetFileSize(AOnActionPlugin_InMemFS, CIVFileName));
          PluginInMemFS.LoadFileFromMem(AOnActionPlugin_InMemFS, CIVFileName, @FIV[1]);
        end
        else
          AOnActionPlugin_AddToLog(PChar('IV not provided. ' + CIVFileName + ' not found.'));
      end
      else
        AOnActionPlugin_AddToLog(PChar('Key not provided. ' + CKeyFileName + ' not found.'));

      //for debugging:
      //s := '';
      //for i := 1 to Length(FKey) do
      //  s := s + IntToHex(Ord(FKey[i]));
      //
      //AOnActionPlugin_AddToLog(PChar('Key: ' + s));
      //
      //s := '';
      //for i := 1 to Length(FIV) do
      //  s := s + IntToHex(Ord(FIV[i]));
      //
      //AOnActionPlugin_AddToLog(PChar('IV: ' + s));
    finally
      PluginInMemFS.Free;
    end;
  except
    on E: Exception do
      AOnActionPlugin_AddToLog(PChar('Plugin exception in ConfigurePluginForMemoryContent: ' + E.Message)); //Access violation - very useful
  end;
end;


exports
  GetAPIVersion,
  GetListOfProperties,
  ExecutePlugin,
  ProcessMemoryContent,
  ConfigurePluginForMemoryContent;

begin
  FKeySet := False;  //init again here
end.

