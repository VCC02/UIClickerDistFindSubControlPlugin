{
    Copyright (C) 2025 VCC
    creation date: 15 Jun 2025
    initial release date: 15 Jun 2025

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


program DistEnc;

{$mode objfpc}{$H+}

//ToDo:
//- check if there is a way to automatically send both 32 and 64-bit dlls
//

uses
  Interfaces, Classes, SysUtils, MemArchive, DllUtils, ClickerClientIntf,
  DistEncDecCommon,
  DCPrijndael, DCPmd5, DCPsha256;

type
  THandlers = class
  private
    FKey: TArr32OfByte;
    FIV: TArr32OfByte;

    procedure HandleOnInitEncryption(var AArcKey: TArr32OfByte);
    procedure HandleOnGetKeyFromPassword(APassword: string; var ArcKey: TArr32OfByte);
    procedure HandleOnEncryptArchive(AArchiveStream: TMemoryStream);
    procedure HandleOnEncryptionCleanup;
    procedure HandleOnCompress(APlainStream, AArchiveStream: TMemoryStream; ACompressionLevel: Integer);
    procedure HandleOnComputeArchiveHash(AArchiveStream: Pointer; AArchiveStreamSize: Int64; var AResultedHash: TArr32OfByte; AAdditionalInfo: string = '');
  end;


procedure XorBlock(ABlock, AKey: Pointer; ALen: Integer);
type
  TEmptyArray = array[0..0] of Byte;
var
  i: Integer;
  PBlock, PKey: ^TEmptyArray;
begin
  PBlock := ABlock;
  PKey := AKey;

  for i := 0 to ALen - 1 do
    PBlock^[i] := PBlock^[i] xor PKey^[i];
end;


procedure THandlers.HandleOnInitEncryption(var AArcKey: TArr32OfByte);
begin
  //
end;


procedure THandlers.HandleOnGetKeyFromPassword(APassword: string; var ArcKey: TArr32OfByte);
begin
  //
end;


procedure THandlers.HandleOnEncryptArchive(AArchiveStream: TMemoryStream);
var
  AES: TDCP_rijndael;
  SHA256: TDCP_sha256;
  i: Integer;
  InDataXorPrevBlock, HashOfBlock: TArr32OfByte;
begin
  AES := TDCP_rijndael.Create(nil);
  try
    AES.Init(FKey, Length(FKey) shl 3, nil);

    SHA256 := TDCP_sha256.Create(nil);
    try
      SHA256.Init;
      SHA256.Update(FIV, Length(FIV));
      SHA256.Final(HashOfBlock);
    finally
      SHA256.Free;
    end;

    for i := 0 to AArchiveStream.Size shr 5 - 1 do
      XorBlock(Pointer(UInt64(AArchiveStream.Memory) + i shl 5), @CDistSharedKey[0], 32);

    try
      for i := 0 to AArchiveStream.Size shr 5 - 1 do
      begin
        AES.EncryptECB(Pointer(UInt64(AArchiveStream.Memory) + i shl 5)^, InDataXorPrevBlock[0]);
        AES.EncryptECB(Pointer(UInt64(AArchiveStream.Memory) + i shl 5 + 16)^, InDataXorPrevBlock[16]);

        XorBlock(@InDataXorPrevBlock, @HashOfBlock, 32);

        SHA256 := TDCP_sha256.Create(nil);
        try
          SHA256.Init;
          SHA256.Update(Pointer(UInt64(AArchiveStream.Memory) + i shl 5)^, 32);
          SHA256.Final(HashOfBlock);
        finally
          SHA256.Free;
        end;

        Move(InDataXorPrevBlock, Pointer(UInt64(AArchiveStream.Memory) + i shl 5)^, 32);  //update back after computing hash
      end;
    finally
      AES.Burn;
    end;
  finally
    AES.Free;
  end;
end;


procedure THandlers.HandleOnEncryptionCleanup;
begin
  //
end;


procedure THandlers.HandleOnCompress(APlainStream, AArchiveStream: TMemoryStream; ACompressionLevel: Integer);
//var
//  Options: TplLzmaOptions;
begin
  AArchiveStream.CopyFrom(APlainStream, APlainStream.Size);  // - for debugging - no compression used

  //Options.Algorithm := 2;
  //Options.DictionarySize := 1048576;
  //Options.EOS := True;
  //Options.MatchFinder := 1;
  //Options.NumBenchMarkPasses := 10;
  //Options.Fb := 273; // 5;
  //Options.Lc := 3;
  //Options.Lp := 0;
  //Options.Pb := 0;
  //CompressStreamLzma(APlainStream, AArchiveStream, Options);
end;


procedure THandlers.HandleOnComputeArchiveHash(AArchiveStream: Pointer; AArchiveStreamSize: Int64; var AResultedHash: TArr32OfByte; AAdditionalInfo: string = '');
var
  //SHA256: TDCP_sha256;
  MD5: TDCP_md5;
begin
  FillChar(AResultedHash, 32, 0);  //init with 0, because MD5 returns only 16 bytes

  begin
    MD5 := TDCP_md5.Create(nil);
    try
      MD5.Init;
      MD5.Update(AArchiveStream^, AArchiveStreamSize);
      MD5.Final(AResultedHash);
    finally
      MD5.Free;
    end;
    Exit;
  end;

  //SHA256 := TDCP_sha256.Create(nil);   //This is implemented by the hashing plugin. (it could have been other algorithm)
  //try
  //  SHA256.Init;
  //  SHA256.Update(AArchiveStream^, AArchiveStreamSize);
  //  SHA256.Final(AResultedHash);
  //finally
  //  SHA256.Free;
  //end;
end;


function ArchivePlugin(APluginFileName, APluginFileNameInsideArchive, ATrasmissionKey, ATrasmissionIV, ASubsequentKey, ASubsequentIV, ADecryptionPluginName, ADecompressionPluginName, AHashingPluginName, AAdditionalInfo: string; AUseCompression, AIsDecDecHash: Boolean; AAdditionalFiles: TStringList; AOutputStream: TMemoryStream): string;
var
  MemStream, SecondMemStream, ArchiveStream: TMemoryStream;
  FileNameWS, DecryptionPluginNameWS, DecompressionPluginNameWS, HashingPluginNameWS, AdditionalInfoWS: WideString;
  Response: string;
  ResLen: Integer;
  Archive: TMemArchive;
  SHA256: TDCP_sha256;
  ArchiveHandlers: THandlers;
  i: Integer;
  s: string;
  SubsequentKeyHash, SubsequentIVHash: TArr32OfByte;
  MainBitness, TheOtherBitness, SecondPluginFileName, SecondPluginFileNameInsideArchive: string;
begin
  Result := '';
  if not FileExists(APluginFileName) then
    Exit;

  MainBitness := '';
  TheOtherBitness := '';
  SecondMemStream := nil;
  if Pos('i386-win32', APluginFileName) > 0 then
  begin
    MainBitness := 'i386-win32';
    TheOtherBitness := 'x86_64-win64';
  end;

  if Pos('x86_64-win64', APluginFileName) > 0 then
  begin
    MainBitness := 'x86_64-win64';
    TheOtherBitness := 'i386-win32';
  end;

  ArchiveHandlers := THandlers.Create;
  try
    MemStream := TMemoryStream.Create;
    SecondMemStream := TMemoryStream.Create;
    ArchiveStream := TMemoryStream.Create;
    Archive := TMemArchive.Create;
    try
      SetLength(Response, CMaxSharedStringLength);
      MemStream.LoadFromFile(APluginFileName);

      if MainBitness <> '' then
      begin
        SecondPluginFileName := StringReplace(APluginFileName, MainBitness, TheOtherBitness, [rfReplaceAll]);

        if FileExists(SecondPluginFileName) then
        begin
          SecondMemStream.LoadFromFile(SecondPluginFileName);
          if Pos(MainBitness, APluginFileNameInsideArchive) = 1 then //the filename is prefixed with e.g. i386-win32, then the other will become x86_64-win64
            SecondPluginFileNameInsideArchive := StringReplace(APluginFileNameInsideArchive, MainBitness, TheOtherBitness, [rfReplaceAll])
          else
            if Pos(TheOtherBitness, APluginFileNameInsideArchive) = 1 then //if for some reason, they are swapped (i.e. the two arguments do not point to the same bitness), then set swapped
              SecondPluginFileNameInsideArchive := StringReplace(APluginFileNameInsideArchive, TheOtherBitness, MainBitness, [rfReplaceAll]);
        end
        else
          MainBitness := ''; //reset, so no second file will be sent
      end;  //If no bitness is detected, then some other plugin is sent, which does not matter. At least its path cannot be used to find its bitness.

      if ADecryptionPluginName > '' then
      begin
        Archive.OnInitEncryption := @ArchiveHandlers.HandleOnInitEncryption;
        Archive.OnGetKeyFromPassword := @ArchiveHandlers.HandleOnGetKeyFromPassword;
        Archive.OnEncryptArchive := @ArchiveHandlers.HandleOnEncryptArchive;
        Archive.OnEncryptionCleanup := @ArchiveHandlers.HandleOnEncryptionCleanup;
        Archive.Password := 'dummy';  //setting the password to a value, different than '', is enough to call the encryption handlers
                                      //however, in this example, this mechanism is not used. The key is hardcoded. (same as in the example plugin)
        WriteLn('Using archive encryption..');
      end;

      SHA256 := TDCP_sha256.Create(nil);
      try
        SHA256.Init;
        SHA256.UpdateStr(ATrasmissionKey);
        SHA256.Final(ArchiveHandlers.FKey);
      finally
        SHA256.Free;
      end;

      SHA256 := TDCP_sha256.Create(nil);
      try
        SHA256.Init;
        SHA256.UpdateStr(ATrasmissionIV);
        SHA256.Final(ArchiveHandlers.FIV);
      finally
        SHA256.Free;
      end;

      SHA256 := TDCP_sha256.Create(nil);
      try
        SHA256.Init;
        SHA256.UpdateStr(ASubsequentKey);
        SHA256.Final(SubsequentKeyHash);
      finally
        SHA256.Free;
      end;

      SHA256 := TDCP_sha256.Create(nil);
      try
        SHA256.Init;
        SHA256.UpdateStr(ASubsequentIV);
        SHA256.Final(SubsequentIVHash);
      finally
        SHA256.Free;
      end;

      //for debugging:
      //s := '';
      //for i := 0 to 31 do
      //  s := s + IntToHex(ArchiveHandlers.FKey[i]);
      //
      //WriteLn('Key: ' + s);
      //
      //s := '';
      //for i := 0 to 31 do
      //  s := s + IntToHex(ArchiveHandlers.FIV[i]);
      //
      //WriteLn(' IV: ' + s);

      if AUseCompression then
        Archive.OnCompress := @ArchiveHandlers.HandleOnCompress;

      Archive.CompressionLevel := 9 * Ord(AUseCompression);

      Archive.OnComputeArchiveHash := @ArchiveHandlers.HandleOnComputeArchiveHash;
      Archive.OpenArchive(ArchiveStream, True);
      try
        Archive.AddFromStream(APluginFileNameInsideArchive, MemStream);  //this should be .dll

        if MainBitness <> '' then
          Archive.AddFromStream(SecondPluginFileNameInsideArchive, SecondMemStream);  //this should be .dll

        MemStream.Clear;
        MemStream.SetSize(32);
        Move(SubsequentKeyHash, MemStream.Memory^, MemStream.Size);
        Archive.AddFromStream('Key.txt', MemStream);

        MemStream.Clear;
        MemStream.SetSize(32);
        Move(SubsequentIVHash, MemStream.Memory^, MemStream.Size);
        Archive.AddFromStream('IV.txt', MemStream);

        for i := 0 to AAdditionalFiles.Count - 1 do
        begin
          MemStream.Clear;
          MemStream.LoadFromFile(AAdditionalFiles.Strings[i]);
          MemStream.Position := 0;
          Archive.AddFromStream(ExtractFileName(AAdditionalFiles.Strings[i]), MemStream); //remove path
          //Archive.AddFromStream(AAdditionalFiles.Strings[i], MemStream); //The file can be added full path. Then, only the drive letter is replaced by "Mem:".
        end;

        MemStream.Clear;
      finally
        Archive.CloseArchive;
      end;

      APluginFileName := APluginFileName + 'arc'; //results .dllarc

      FileNameWS := WideString(ExtractFileName(APluginFileName));
      DecryptionPluginNameWS := WideString(ADecryptionPluginName);
      DecompressionPluginNameWS := WideString(ADecompressionPluginName);
      HashingPluginNameWS := WideString(AHashingPluginName);
      AdditionalInfoWS := WideString(AAdditionalInfo); //for example a list of compression parameters

      ResLen := SendMemPluginArchiveFileToServer(@FileNameWS[1],
                                                 @DecryptionPluginNameWS[1],
                                                 @DecompressionPluginNameWS[1],
                                                 @HashingPluginNameWS[1],
                                                 ArchiveStream.Memory,
                                                 ArchiveStream.Size,
                                                 Archive.CompressionLevel,
                                                 @AdditionalInfoWS[1],
                                                 AIsDecDecHash,
                                                 @Response[1]);
      SetLength(Response, ResLen);
    finally
      MemStream.Free;
      SecondMemStream.Free;
      ArchiveStream.Free;
      Archive.Free;
    end;
  finally
    ArchiveHandlers.Free;
  end;

  Result := Response;
end;


procedure LoadSettingsFromCmd(out AClientFnm, APluginFnm, APluginFnmInsideArchive,
                                  ADecryptionPluginName, ADecompressionPluginName, AHashingPluginName,
                                  AUIClickerAddress, AUIClickerPort: string;
                                  AAdditionalFiles: TStringList;
                              out AIsDecDecHash: Boolean);
var
  i: Integer;
begin
  i := 1;
  AIsDecDecHash := False; //provide a default

  repeat
    if ParamStr(i) = '--ClickerClient' then   //set path to ClickerClient.dll
    begin
      AClientFnm := Copy(ParamStr(i + 1), 1, 10000);
      Inc(i);
    end;

    if ParamStr(i) = '--PluginToBeSent' then
    begin
      APluginFnm := Copy(ParamStr(i + 1), 1, 10000);
      Inc(i);
    end;

    if ParamStr(i) = '--PluginToBeSentDestName' then
    begin
      APluginFnmInsideArchive := Copy(ParamStr(i + 1), 1, 10000);
      Inc(i);
    end;

    if ParamStr(i) = '--DecryptionPluginName' then    //if not passed, encryption is not used
    begin
      ADecryptionPluginName := Copy(ParamStr(i + 1), 1, 100);     //no path expected, only the filename
      Inc(i);
    end;

    if ParamStr(i) = '--DecompressionPluginName' then  //if not passed, compression is not used
    begin
      ADecompressionPluginName := Copy(ParamStr(i + 1), 1, 100);  //no path expected, only the filename
      Inc(i);
    end;

    if ParamStr(i) = '--HashingPluginName' then       //if not passed, custom hashing is not used (MD5 is already provided by UIClicker, without plugins)
    begin
      AHashingPluginName := Copy(ParamStr(i + 1), 1, 100);  //no path expected, only the filename
      Inc(i);
    end;

    if ParamStr(i) = '--UIClickerAddress' then
    begin
      AUIClickerAddress := Copy(ParamStr(i + 1), 1, 100);
      Inc(i);
    end;

    if ParamStr(i) = '--UIClickerPort' then
    begin
      AUIClickerPort := IntToStr(StrToIntDef(Copy(ParamStr(i + 1), 1, 5), 5444));
      Inc(i);
    end;

    if ParamStr(i) = '--IsDecDecHash' then   //The plugin to be sent is a DecDecHash plugin. If yes, it ends up in a different InMem FS.
    begin
      AIsDecDecHash := Copy(ParamStr(i + 1), 1, 5) = 'True';
      Inc(i);
    end;

    if ParamStr(i) = '--AdditionalFile' then
    begin
      AAdditionalFiles.Add(Copy(ParamStr(i + 1), 1, 10000));
      Inc(i);
    end;

    Inc(i);
  until i >= ParamCount;
end;


var
  EncFile: TMemoryStream;
  ClientFnm, PluginFnm, PluginFnmInsideArchive, UIClickerAddress, UIClickerPort, UIClickerLink, VerificationLink: string;
  PortNum: Integer;
  TrasmissionKey, TrasmissionIV, SubsequentKey, SubsequentIV: string;
  DecryptionPluginName, DecompressionPluginName, HashingPluginName: string;
  IsDecDecHash: Boolean;
  AdditionalFiles: TStringList;
  i: Integer;
begin
  if ParamCount = 0 then
  begin
    WriteLn('Usage: ' + ExtractFileName(ParamStr(0)) + ' --ClickerClient <Full path to ClickerClient.dll> --PluginToBeSent <Full path to PluginToBeSent[.dll]> --PluginToBeSentDestName <Destination name of the PluginToBeSent[.dll]> --DecryptionPluginName <Name of a dll file, used for decryption.> --DecompressionPluginName <Name of a dll file, used for decompression.> --HashingPluginName <Name of a dll file, used for custom hashing.> --UIClickerAddress <UIClicker address> --UIClickerPort <UIClicker port number> --IsDecDecHash True');
    WriteLn;
    WriteLn('The plugin to be sent is the dll that will be archived and sent to UIClicker.');
    WriteLn('The destination name is the name that will be given to this plugin (without path), inside the archive and it will be used by UIClicker.');
    WriteLn('The UIClicker address can be an IP address and the port should be a valid port number, which is used by UIClicker to listen on.');
    WriteLn('The "Trasmission" and "Subsequent" keys and the "Trasmission" and "Subsequent" init vector are read from StdIn.');
    WriteLn('The --DecryptionPluginName parameter is the name of a decryption plugin, used for decrypting what is being sent now. If not provided, no encryption is done. It''s format must be something like: --DecryptionPluginName "DistDec.dllarc|Mem:\DistDec.dll"');
    WriteLn('The --DecompressionPluginName parameter is the name of a decryption plugin, used for decrypting what is being sent now. If not provided, no encryption is done.');
    WriteLn('The --HashingPluginName parameter is the name of a decryption plugin, used for decrypting what is being sent now. If not provided, no encryption is done.');
    WriteLn('The --IsDecDecHash parameter, if provided, must be True and it means that the file being sent now, is a DecDecHash plugin, like one of the above. If not, it means it is an ordinary plugin (or other file).');
    WriteLn('The --AdditionalFile parameter can be provided multiple times, to include additional files to archive.');
    WriteLn;
    Exit;
  end;

  AdditionalFiles := TStringList.Create;
  try
    LoadSettingsFromCmd(ClientFnm, PluginFnm, PluginFnmInsideArchive,
                        DecryptionPluginName, DecompressionPluginName, HashingPluginName,
                        UIClickerAddress, UIClickerPort, AdditionalFiles, IsDecDecHash);

    if not FileExists(ClientFnm) then
    begin
      WriteLn('ClickerClient.dll not found.');
      Exit;
    end;

    if not FileExists(PluginFnm) then
    begin
      WriteLn('The name of the plugin to be sent is not valid or file not found.');
      Exit;
    end;

    if PluginFnmInsideArchive = '' then
    begin
      WriteLn('Invalid plugin destination file name.');
      Exit;
    end;

    if Trim(UIClickerAddress) = '' then
    begin
      WriteLn('Invalid UIClicker address.');
      Exit;
    end;

    PortNum := StrToIntDef(UIClickerPort, -1);
    if (PortNum < 0) or (PortNum > 65534) then
    begin
      WriteLn('Invalid UIClicker port.');
      Exit;
    end;

    for i := 0 to AdditionalFiles.Count - 1 do
      if not FileExists(AdditionalFiles.Strings[i]) then
      begin
        WriteLn('File not found: ' + AdditionalFiles.Strings[i]);
        Exit;
      end;

    Write('Trasmission Key=');
    ReadLn(TrasmissionKey);

    if TrasmissionKey <> '' then
    begin
      Write('Trasmission IV=');
      ReadLn(TrasmissionIV);
    end;

    Write('Subsequent Key=');
    ReadLn(SubsequentKey);

    if TrasmissionKey <> '' then
    begin
      Write('Subsequent IV=');
      ReadLn(SubsequentIV);
    end;

    //if (DecryptionPluginName > '') and IsDecDecHash then   //TBD
    //  DecryptionPluginName := ExtractFileName(DecryptionPluginName) + 'arc|Mem:\' + ExtractFileName(DecryptionPluginName);

    EncFile := TMemoryStream.Create;
    try
      try
        if not LoadClickerClient(ClientFnm) then
        begin
          WriteLn('Can''t load ClickerClient.dll (expected as the first argument): ' + ParamStr(1));
          Exit;
        end;

        try
          InitClickerClient;
          UIClickerLink := 'http://' + UIClickerAddress + ':' + UIClickerPort + '/';
          SetServerAddress(@WideString(UIClickerLink)[1]);

          SetLength(VerificationLink, CMaxSharedStringLength);
          SetLength(VerificationLink, GetServerAddress(@VerificationLink[1]));

          if VerificationLink <> UIClickerLink then
          begin
            WriteLn('Wrong UIClicker address configured in ClickerClient.dll: ' + VerificationLink);
            Exit;
          end;

          WriteLn('Sending plugin to ' + UIClickerLink);
          WriteLn('Response: ' + ArchivePlugin(PluginFnm, PluginFnmInsideArchive, TrasmissionKey, TrasmissionIV, SubsequentKey, SubsequentIV, DecryptionPluginName, DecompressionPluginName, HashingPluginName, '', DecompressionPluginName > '', IsDecDecHash, AdditionalFiles, EncFile));
        finally
          try
            DoneClickerClient;
          finally
            UnLoadClickerClient;
          end;
        end;
      except
        on E: Exception do
          WriteLn(E.Message);
      end;
    finally
      EncFile.Free;
    end;
  finally
    AdditionalFiles.Free;
  end;
end.

